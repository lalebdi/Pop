{"version":3,"sources":["tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","name","required","ref","type","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLiked","setUserLiked","actionDisplay","display","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl"],"mappings":"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","file":"static/js/main.5acbd529.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { loadTweets } from '../lookup'\n\nexport function TweetsComponent(props){\n    const textAreaRef = React.createRef()\n    const [ newTweets, setNewTweets ] = useState([]) \n    const handleSubmit = (event) => {\n        event.preventDefault()\n        // console.log(event)\n        // console.log(textAreaRef.current.value)\n        const newVal = textAreaRef.current.value\n        // console.log(newVal)\n        let tempNewTweets = [...newTweets];\n        tempNewTweets.unshift({\n            content: newVal,\n            likes: 0,\n            id: 1234\n        })\n        setNewTweets(tempNewTweets) // setting the new state\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea className=\"form-control\" name='tweet' required={true} ref={textAreaRef}>\n                \n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetList newTweets={newTweets}/>\n    </div>\n}\n    \nexport function TweetList(props){\n        const [ tweetsInit, setTweetsInit ] = useState([])\n        const [ tweets, setTweets ] = useState([])\n        // console.log(props.newTweets)\n        useEffect(() =>{\n            const final = [...props.newTweets].concat(tweetsInit)\n            if(final.length !== tweets.length){\n            setTweets(final)\n            }\n        }, [props.newTweets , tweets, tweetsInit])\n\n        useEffect(() => {\n        const myCallback = (response, status) =>{\n            // console.log(response, status)\n            if (status === 200){\n            setTweetsInit(response)\n            }\n        }\n        loadTweets(myCallback)\n        }, [])\n    \n        return tweets.map((item, index)=>{\n        return <Tweet tweet={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark'/>\n        })\n        }\n\n\nexport function ActionBtn(props){\n    const {tweet, action} = props;\n    const [likes, setLikes] = useState( tweet.likes ? tweet.likes : 0);\n    const [userLiked, setUserLiked] = useState(tweet.userLiked === true ? true : false);\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    // const display = action.type === 'like' ? `${ tweet.likes } ${actionDisplay}` : actionDisplay\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like'){ //console.log(tweet.likes+1)\n            if (userLiked === true){ // the user unliked \n                setLikes(likes - 1)\n                setUserLiked(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLiked(true)    \n            }\n        }\n    }\n    const display = action.type === 'like' ? `${ likes } ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}> {display} </button>\n}\n\nexport function Tweet(props){\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n            <p>{tweet.id} - {tweet.content}</p>\n            <div className='btn btn-group'>\n                <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\n                <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\" }}/>\n                <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\" }}/>\n            </div>\n    </div>\n}\n","// import React from 'react';\n\n\nexport function loadTweets(callback){\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = 'http://127.0.0.1:8000/api/tweets/'\n    const responseType = \"json\"\n\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function(){\n    callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n    console.log(e)\n    callback({\"message\": \"The request encoutered an error\"}, 400)\n    }\n    xhr.send()\n\n}","import React from 'react';\nimport './App.css';\nimport { TweetsComponent } from './tweets'\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { TweetsComponent } from './tweets';  \nimport reportWebVitals from './reportWebVitals';\n\n\nconst appEl = document.getElementById('root')\nif(appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  appEl\n  );\n}\nconst tweetsEl = document.getElementById('pop')\nif(tweetsEl){\n  ReactDOM.render(\n    <React.StrictMode>\n    <TweetsComponent />\n  </React.StrictMode>,\n  tweetsEl\n  );\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}